# 本番環境用Docker Compose設定
# 開発環境との主な違い:
# - llmサービスが含まれている（LocalAIを使用）
# - ボリュームマウントなし（イメージビルド方式）
# - 環境変数でLLM_ENDPOINT_TYPE=localaiを設定する

services:
  backend:
    build: ./backend
    ports:
      - "8001:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      llm:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changethis
      POSTGRES_DB: mydb
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  llm:
    image: localai/localai:latest
    ports:
      - "8080:8080"
    volumes:
      - ./models:/models
    command: ["--models-path", "/models", "--debug"]
    networks:
      - app-network
    restart: unless-stopped
    # 全て無料・CPU対応可能なAIOイメージです
    # 初回起動時はモデルのダウンロードに時間がかかります

networks:
  app-network:
    driver: bridge

volumes:
  pgdata: